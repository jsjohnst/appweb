#
#   appweb.conf -- Default Configuration for the Embedthis Appweb HTTP Server
#   
#   This configuration file controls the operation of the Appweb server. The 
#   order of configuration directives matters as this file is parsed only once.
#   You must put the server root and error log definitions first to ensure 
#   configuration errors are logged.
#

#
#   Define the logging configuration first so any errors are logged
#
include conf/log.conf

#
#   Root directory for Appweb to find necessary files and libraries. 
#   Appweb will change directory to this location when it runs.
#
ServerRoot "/etc/appweb"

#
#   Bind Appweb to listen for incoming requests on this address. Formats 
#   include (IP, IP:PORT, PORT). If an IP address is omitted, Appweb will 
#   listen on all interfaces. If a port is omitted, then port 80 is used.
#   Use [::]:port for IPv6 to bind to all addresses. [::1] is the IPv6 loopback.
#
Listen 7777

#
#   Name of the server to use for redirects and error responses to clients. 
#   Uncomment this line and replace it with the public name of your server. 
#   This host name and port do not get used for listening on sockets. If 
#   unspecified, Appweb will use the IP address for the host name.
#
#   ServerName http://localhost:9997

#
#   Location for documents for the primary server host. Virtual hosts 
#   may define their own DocumentRoot directives.
#
DocumentRoot "/var/www/appweb-default"

#
#   Default directory index to serve when a directory is requested.
#
DirectoryIndex index.html

#
#   Location of the mime translation file to map content types to file 
#   extensions. For other types, you can use AddType.  
#   "AddType application/x-appweb-other other"
#
TypesConfig mime.types

#
#   Search path for dynamically loadable modules. If modules have been 
#   statically linked into Appweb, this directive and LoadModule directives
#   will be ignored. This directive must be before any LoadModule directives.
#
LoadModulePath "/usr/lib/appweb/modules"

#
#   Notes on the request processing pipeline. The pipeline consists of a set 
#   of stages comprised of a handler, possible filters and one network 
#   connector. 
#
#   The request processing pipeline can be configured at various levels: 
#   globally, virtual hosts and location blocks. At each level, a set of 
#   processing stages can be defined. Inner levels inherit the pipeline from 
#   the outer levels. The pipeline can be reset at a level by using 
#   ResetPipeline. Each stage may be defined for all requests or only for a 
#   specific file extension or location path prefix.
#
#   The pipeline is defined with the network connector first and the handler 
#   last. If you use the AddConnector, AddFilter or AddHandler directives, the 
#   stage is defined for both input and output processing. For filters you can
#   use AddInputFilter AddOutputFilter directives to define for a single 
#   direction.
#
#   Define the network connector first. This must be before all handlers and 
#   filters. The network connector will transparently use the send connector 
#   for static file data.
#
#   Multiple handlers can be defined, but only the first matching handler will
#   be activated when a request is processed.
#
SetConnector netConnector

<if AUTH_MODULE>
    LoadModule authFilter mod_auth
    #
    #   The auth filter must be first in the pipeline before all handlers and
    #   after the connector definition. Only needed on the output pipeline.
    #
    AddOutputFilter authFilter
</if>

#
#   Add other filters. Order matters. Chunking must be last.
#
<if RANGE_MODULE>
    LoadModule rangeFilter mod_range
    AddOutputFilter rangeFilter
</if>
<if CHUNK_MODULE>
    LoadModule chunkFilter mod_chunk
    AddOutputFilter chunkFilter
</if>

#
#   Include all other modules before the file module which is the catch-all.
#
Include conf/modules/*

#
#   The file handler supports requests for static files. Put this last after
#   all other modules and it becomes the catch-all due to the empty quotes.
#
<if FILE_MODULE>
    LoadModule fileHandler mod_file
    AddHandler fileHandler .html .gif .jpeg .png .pdf ""
</if>

#
#   Include all configuration files. The only wildcard supported is "*". Don't use with extensions, e.g. (*.conf).
#   Order matters here. Wan't to load extension modules first, then configure virtual hosts and lastly apps.
#
Include conf/hosts/*
Include conf/extras/*
Include conf/apps/*

#
#   Include the tunable and miscellaneous parameters
#  
include conf/tune.conf
include conf/misc.conf
